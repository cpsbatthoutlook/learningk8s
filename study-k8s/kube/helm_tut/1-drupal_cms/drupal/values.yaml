global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""


kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonAnnotations: {}
commonLabels: {}

extraDeploy: []


image:
  registry: docker.io
  repository: bitnami/drupal
  tag: 9.3.12-debian-10-r1
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
replicaCount: 1
drupalProfile: standard
drupalSkipInstall: false
drupalUsername: user
drupalPassword: ""
drupalEmail: user@example.com
allowEmptyPassword: true
command: []
args: []
updateStrategy:
  type: RollingUpdate
priorityClassName: ""
schedulerName: ""
topologySpreadConstraints: []
hostAliases:
  - ip: "127.0.0.1"
    hostnames:
      - "status.localhost"
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []
tolerations: []
existingSecret: ""
smtpHost: ""
smtpPort: ""
smtpUser: ""
smtpPassword: ""
smtpProtocol: ""
containerPorts:
  http: 8080
  https: 8443
sessionAffinity: "None"
persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  existingClaim: ""
  hostPath: ""
  annotations: {}

podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
resources:
  requests:
    memory: 512Mi
    cpu: 300m
  limits: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
startupProbe:
  enabled: false
  path: /user/login
  initialDelaySeconds: 600
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1
livenessProbe:
  enabled: true
  path: /user/login
  initialDelaySeconds: 600
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1
readinessProbe:
  enabled: true
  path: /user/login
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 5
  successThreshold: 1
customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}
lifecycleHooks: {}
podAnnotations: {}
podLabels: {}


service:
  type: NodePort
  ports:
    http: 80
    https: 443
  loadBalancerSourceRanges: []
  loadBalancerIP: ""
  nodePorts:
    http: ""
    https: ""
  externalTrafficPolicy: Cluster
  clusterIP: ""
  extraPorts: []
  annotations: {}
  sessionAffinity: None
  sessionAffinityConfig: {}
ingress:
  enabled: false

  pathType: ImplementationSpecific
  apiVersion: ""
  ingressClassName: ""
  hostname: drupal.local
  path: /
  annotations: {}
  tls: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []


mariadb:
  enabled: true
  architecture: standalone
  auth:
    rootPassword: ""
    database: bitnami_drupal
    username: bn_drupal
    password: ""
  primary:
    persistence:
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      hostPath: ""
      existingClaim: ""
externalDatabase:
  host: ""
  port: 3306
  user: bn_drupal
  password: ""
  database: bitnami_drupal


volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r403
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}


metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/apache-exporter
    tag: 0.11.0-debian-10-r122
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9117"


certificates:
  customCertificate:
    certificateSecret: ""
    chainSecret:
      name: secret-name
      key: secret-key
    certificateLocation: /etc/ssl/certs/ssl-cert-snakeoil.pem
    keyLocation: /etc/ssl/private/ssl-cert-snakeoil.key
    chainLocation: /etc/ssl/certs/mychain.pem
  customCAs: []
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r403
    pullPolicy: IfNotPresent
    pullSecrets: []


networkPolicy:
  enabled: false
  metrics:
    enabled: false
    podSelector: {}
    namespaceSelector: {}
  ingress:
    enabled: false
    podSelector: {}
    namespaceSelector: {}
  ingressRules:
    backendOnlyAccessibleByFrontend: false
    customBackendSelector: {}
    accessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    customRules: {}
  egressRules:
    # Deny connections to external. This is not compatible with an external database.
    denyConnectionsToExternal: false
    customRules: {}
