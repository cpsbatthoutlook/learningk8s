Vagrant.configure("2") do |config|
  config.vm.provision :shell, privileged: true, inline: $install_common_tools

  config.vm.define :kmaster do |kmaster|
    kmaster.vm.provider :virtualbox do |vb|
      vb.name = "kmaster"
      vb.memory = 8192
      vb.cpus = 2
    end
    kmaster.vm.box = "ubuntu/xenial64"
    kmaster.disksize.size = "65GB"
    kmaster.vm.hostname = "kmaster"
    #kmaster.vm.network :private_network, ip: "192.168.56.10"
    kmaster.vm.network "public_network", ip: "192.168.0.20", bridge: "enp0s25"
    kmaster.vm.synced_folder "./data", "/data"

    kmaster.vm.provision :shell, privileged: false, inline: $provision_master_node
  end

  %w{knode1 knode2 knode3}.each_with_index do |name, i|
    config.vm.define name do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.name = "knode#{i + 1}"
        vb.memory = 6144
        vb.cpus = 1
      end
      node.vm.box = "ubuntu/xenial64"
      node.disksize.size = "65GB"
      node.vm.hostname = name
      #node.vm.network :private_network, ip: "192.168.56.#{i + 11}"
      node.vm.network "public_network", ip: "192.168.0.#{i + 21}", bridge: "enp0s25"
      node.vm.provision :shell, privileged: false, inline: <<-SHELL
sudo /vagrant/join.sh
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.0.#{i + 21}"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
#echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.56.#{i + 11}"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
cat /vagrant/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL
    end
  end

  config.vm.provision "shell", inline: $install_multicast
end


$install_common_tools = <<-SCRIPT
# bridged traffic to iptables is enabled for kube-router.
cat >> /etc/ufw/sysctl.conf <<EOF
net/bridge/bridge-nf-call-ip6tables = 1
net/bridge/bridge-nf-call-iptables = 1
net/bridge/bridge-nf-call-arptables = 1
EOF

# Didn't work on reboot
#ip route change default via 192.168.0.1
# 2nd approach
echo "Start: Copying the custom networking stuff, to address k8s API service startup issue"
mkdir ~/start_up
cp /vagrant/customize/chander_boot_k8s.bash ~/start_up/chander_boot_k8s.bash
chmod 755 ~/start_up/chander_boot_k8s.bash
cp /vagrant/customize/chander.service /etc/systemd/system/chander.service
chmod 755 /etc/systemd/system/chander.service
systemctl enable chander.service
echo "End: Copying the custom networking stuff"
#
set -e
IFNAME=$1
ADDRESS="$(ip -4 addr show $IFNAME | grep "inet" | head -1 |awk '{print $2}' | cut -d/ -f1)"
sed -e "s/^.*${HOSTNAME}.*/${ADDRESS} ${HOSTNAME} ${HOSTNAME}.local/" -i /etc/hosts

# remove ubuntu-bionic entry
sed -e '/^.*ubuntu-bionic.*/d' -i /etc/hosts
sed -e '/^.*ubuntu-xenial.*/d' -i /etc/hosts

# Patch OS
apt-get update && apt-get upgrade -y
# Install NFS-common
apt -y install nfs-common jq xmlstarlet  tmux  jq xmlstarlet tmux git net-tools
echo "192.168.0.121:/k8s_share /mnt nfs rw,hard 0 0" >> /etc/fstab

# Create local host entries
echo "192.168.0.20 kmaster" >> /etc/hosts
echo "192.168.0.21 knode1" >> /etc/hosts
echo "192.168.0.22 knode2" >> /etc/hosts
echo "192.168.0.23 knode3" >> /etc/hosts
echo "192.168.0.24 knode4" >> /etc/hosts
echo "192.168.0.25 knode5" >> /etc/hosts
echo "192.168.0.26 knode6" >> /etc/hosts

# disable swap
swapoff -a
sed -i '/swap/d' /etc/fstab

# Install kubeadm, kubectl and kubelet
export DEBIAN_FRONTEND=noninteractive
apt-get -qq install ebtables ethtool
apt-get -qq install jq xmlstarlet tmux git net-tools  apache2-utils
apt-get -qq update
apt-get -qq install -y docker.io apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get -qq update
apt-get -qq install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubectl kubeadm

# Set external DNS
sed -i -e 's/#DNS=/DNS=8.8.8.8/' /etc/systemd/resolved.conf
service systemd-resolved restart
 git config --global user.email "chander@vagrant_ubuntu_6node.com"
 git config --global user.name "Chander Batth"

SCRIPT

$provision_master_node = <<-SHELL
OUTPUT_FILE=/vagrant/join.sh
KEY_FILE=/vagrant/data/ssh_keys/authorized_keys
rm -rf $OUTPUT_FILE
rm -rf $KEY_FILE

# Create key
ssh-keygen -q -t rsa -b 4096 -N '' -f /home/vagrant/.ssh/id_rsa
cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3K78sI/ZE/FYOGl4SOvfDD7eV1Um8gBEc8bFoR+Oeusee7mbYMDnSS9xOJIWzUYDgNcUlRMCdUOzh9J4nhg6xU6f6Pp4f6pC1wUdMG95TTocWJNfjN14lruBkyf8dI8YqopBpnhWQuD+CePSzHMV/CIa6lvGWQfIrvivANJ9EAAE+IYJ2VEawqEpvRI3KFan2Cg31BM/Tm6WnjiAaFlaDJLjudotuB40Y1Ffiy5Bnr+kyzbSIUtBOCdgY08nhjbgaEx6pSWD4LdbyXTOy9LtEv4xGC1c+3d2KvEgRZP9kXjiuuU47mswTjVbsjnLULv7n1tN7/LwcF7UD/2d/pLc9 cpbatth@cbatth" >> /home/vagrant/.ssh/authorized_keys

cat /home/vagrant/.ssh/authorized_keys > ${KEY_FILE}


# Start cluster
sudo kubeadm init --apiserver-advertise-address=192.168.0.20 --pod-network-cidr=10.244.0.0/16 | grep -Ei "kubeadm join|discovery-token-ca-cert-hash" > ${OUTPUT_FILE}
#sudo kubeadm init --apiserver-advertise-address=192.168.56.10 --pod-network-cidr=10.244.0.0/16 | grep -Ei "kubeadm join|discovery-token-ca-cert-hash" > ${OUTPUT_FILE}
chmod +x $OUTPUT_FILE

# Configure kubectl for vagrant and root users
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
sudo mkdir -p /root/.kube
sudo cp -i /etc/kubernetes/admin.conf /root/.kube/config
sudo chown -R root:root /root/.kube

# Fix kubelet IP
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.0.20"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# Use our flannel config file so that routing will work properly
kubectl create -f /vagrant/kube-flannel.yml

# Set alias on master for vagrant and root users
echo "alias k=/usr/bin/kubectl" >> $HOME/.bash_profile
sudo echo "alias k=/usr/bin/kubectl" >> /root/.bash_profile

# Install the etcd client
#sudo apt install etcd-client

sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL

$install_multicast = <<-SHELL
apt-get -qq install -y avahi-daemon libnss-mdns
SHELL
